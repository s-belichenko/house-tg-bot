// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SystemLogger is an autogenerated mock type for the SystemLogger type
type SystemLogger struct {
	mock.Mock
}

type SystemLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemLogger) EXPECT() *SystemLogger_Expecter {
	return &SystemLogger_Expecter{mock: &_m.Mock}
}

// Fatal provides a mock function with given fields: args
func (_m *SystemLogger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type SystemLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Fatal(args ...interface{}) *SystemLogger_Fatal_Call {
	return &SystemLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *SystemLogger_Fatal_Call) Run(run func(args ...interface{})) *SystemLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Fatal_Call) Return() *SystemLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Fatal_Call) RunAndReturn(run func(...interface{})) *SystemLogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *SystemLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type SystemLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *SystemLogger_Fatalf_Call {
	return &SystemLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *SystemLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *SystemLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Fatalf_Call) Return() *SystemLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *SystemLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Fatalln provides a mock function with given fields: args
func (_m *SystemLogger) Fatalln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Fatalln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalln'
type SystemLogger_Fatalln_Call struct {
	*mock.Call
}

// Fatalln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Fatalln(args ...interface{}) *SystemLogger_Fatalln_Call {
	return &SystemLogger_Fatalln_Call{Call: _e.mock.On("Fatalln",
		append([]interface{}{}, args...)...)}
}

func (_c *SystemLogger_Fatalln_Call) Run(run func(args ...interface{})) *SystemLogger_Fatalln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Fatalln_Call) Return() *SystemLogger_Fatalln_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Fatalln_Call) RunAndReturn(run func(...interface{})) *SystemLogger_Fatalln_Call {
	_c.Run(run)
	return _c
}

// Output provides a mock function with given fields: calldepth, s
func (_m *SystemLogger) Output(calldepth int, s string) error {
	ret := _m.Called(calldepth, s)

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(calldepth, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemLogger_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type SystemLogger_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
//   - calldepth int
//   - s string
func (_e *SystemLogger_Expecter) Output(calldepth interface{}, s interface{}) *SystemLogger_Output_Call {
	return &SystemLogger_Output_Call{Call: _e.mock.On("Output", calldepth, s)}
}

func (_c *SystemLogger_Output_Call) Run(run func(calldepth int, s string)) *SystemLogger_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *SystemLogger_Output_Call) Return(_a0 error) *SystemLogger_Output_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemLogger_Output_Call) RunAndReturn(run func(int, string) error) *SystemLogger_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: args
func (_m *SystemLogger) Print(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type SystemLogger_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Print(args ...interface{}) *SystemLogger_Print_Call {
	return &SystemLogger_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, args...)...)}
}

func (_c *SystemLogger_Print_Call) Run(run func(args ...interface{})) *SystemLogger_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Print_Call) Return() *SystemLogger_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Print_Call) RunAndReturn(run func(...interface{})) *SystemLogger_Print_Call {
	_c.Run(run)
	return _c
}

// Printf provides a mock function with given fields: format, args
func (_m *SystemLogger) Printf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type SystemLogger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Printf(format interface{}, args ...interface{}) *SystemLogger_Printf_Call {
	return &SystemLogger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, args...)...)}
}

func (_c *SystemLogger_Printf_Call) Run(run func(format string, args ...interface{})) *SystemLogger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Printf_Call) Return() *SystemLogger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Printf_Call) RunAndReturn(run func(string, ...interface{})) *SystemLogger_Printf_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function with given fields: args
func (_m *SystemLogger) Println(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SystemLogger_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type SystemLogger_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - args ...interface{}
func (_e *SystemLogger_Expecter) Println(args ...interface{}) *SystemLogger_Println_Call {
	return &SystemLogger_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, args...)...)}
}

func (_c *SystemLogger_Println_Call) Run(run func(args ...interface{})) *SystemLogger_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *SystemLogger_Println_Call) Return() *SystemLogger_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *SystemLogger_Println_Call) RunAndReturn(run func(...interface{})) *SystemLogger_Println_Call {
	_c.Run(run)
	return _c
}

// NewSystemLogger creates a new instance of SystemLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemLogger {
	mock := &SystemLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
